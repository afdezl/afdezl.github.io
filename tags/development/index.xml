<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on afdezl Blog</title>
    <link>https://afdezl.github.io/tags/development/</link>
    <description>Recent content in Development on afdezl Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 May 2018 10:46:44 +0100</lastBuildDate>
    
	<atom:link href="https://afdezl.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with React Native &amp; Django authentication - Part 2</title>
      <link>https://afdezl.github.io/post/authentication-react-native-django-2/</link>
      <pubDate>Tue, 15 May 2018 10:46:44 +0100</pubDate>
      
      <guid>https://afdezl.github.io/post/authentication-react-native-django-2/</guid>
      <description>In part 1 we left off with a working authentication API in Django, we will resume here with the creation of our React Native application.
2. Initialising the React Native app 2.1 Required toolset You will need to have node and npm installed. Navigate to the django-rn-auth directory set up in part 1 and initlialise a new React Native app as follows:
npm install -g create-react-native-app create-react-native-app authapp &amp;amp;&amp;amp; cd authapp  Once the application directory has been initialised, you can start the development server by running:</description>
    </item>
    
    <item>
      <title>Getting started with React Native &amp; Django authentication - Part 1</title>
      <link>https://afdezl.github.io/post/authentication-react-native-django-1/</link>
      <pubDate>Fri, 04 May 2018 18:46:44 +0100</pubDate>
      
      <guid>https://afdezl.github.io/post/authentication-react-native-django-1/</guid>
      <description>If you&amp;rsquo;re starting with React Native, chances are you&amp;rsquo;re delegating authentication to services like Firebase or Cognito and passing back the state to your application backend in order to provide the right content for the user.
These services scale wonderfully and are fully managed by the provider, but sometimes the provided user model does not offer the required flexibility or you simply don&amp;rsquo;t like passing state between the service and your backend.</description>
    </item>
    
  </channel>
</rss>